import argparse


def lightgbm_args():
    p = argparse.ArgumentParser(description="lightgbm")
    
    p.add_argument("--model_name", type=str, default="lightgbm")
    p.add_argument("--num_folds", type=int, default=5)
    p.add_argument("--random_seed", type=int, default=42)
    p.add_argument("--use_predict_proba", type=bool, default=True)
    p.add_argument("--shuffle", type=bool, default=True)
    p.add_argument("--verbose", type=bool, default=False)
    p.add_argument("--problem_type", type=str, default="binary_classification")
    p.add_argument("--train_data", type=str, default="dataset/binary_classification.csv")
    p.add_argument("--device", type=str, default="cpu", choices=["cpu", "gpu"])
    p.add_argument("--only_one_train", type=bool, default=True)
    p.add_argument("--output_path", type=str, default="results")
    p.add_argument("--device_type", type=str, default="cpu", choices=["cpu", "gpu", "cuda"])
    
    # parameters
    # - https://lightgbm.readthedocs.io/en/stable/Parameters.html
    p.add_argument("--num_iterations", type=int, default=100, help="[1, inf]")
    p.add_argument("--num_leaves", type=int, default=31, help="[1, inf]")
    p.add_argument("--learning_rate", type=float, default=0.1, help="learning_rate, (0, inf]")
    p.add_argument("--tree_learner", type=str, default="serial", choices=["serial", "feature", "data", "voting"], help="[1, inf]")
    p.add_argument("--num_threads", type=int, default=0)
    p.add_argument("--seed", type=int, default=42)
    p.add_argument("--deterministic", type=bool, default=False, choices=[True, False])
    p.add_argument("--early_stopping_round", type=int, default=0)
    p.add_argument("--force_col_wise", type=bool, default=False, choices=[True, False], help="used only with cpu device type")
    p.add_argument("--force_row_wise", type=bool, default=False, choices=[True, False], help="used only with cpu device type")
    p.add_argument("--histogram_pool_size", type=float, default=-1.)
    p.add_argument("--max_depth", type=int, default=-1)
    p.add_argument("--min_data_in_leaf", type=int, default=20)
    p.add_argument("--min_sum_hessian_in_leaf", type=float, default=1e-3)
    p.add_argument("--bagging_fraction", type=float, default=1.)
    p.add_argument("--pos_bagging_fraction", type=float, default=1.)
    p.add_argument("--neg_bagging_fraction", type=float, default=1.)
    p.add_argument("--bagging_freq", type=int, default=0)
    p.add_argument("--bagging_seed", type=int, default=3)
    p.add_argument("--feature_fraction", type=float, default=1.)
    p.add_argument("--feature_fraction_bynode", type=float, default=1.)
    p.add_argument("--feature_fraction_seed", type=int, default=2)
    p.add_argument("--extra_trees", type=bool, default=False, choices=[True, False])
    p.add_argument("--first_metric_only", type=bool, default=False, choices=[True, False])
    p.add_argument("--max_delta_step", type=float, default=0.)
    p.add_argument("--lambda_l1", type=float, default=0.)
    p.add_argument("--lambda_l2", type=float, default=0.)
    p.add_argument("--linear_lambda", type=float, default=0.)
    p.add_argument("--min_gain_to_split", type=float, default=0.)
    p.add_argument("--drop_rate", type=float, default=0.1)
    p.add_argument("--max_drop", type=int, default=50)
    p.add_argument("--skip_drop", type=float, default=0.5)
    p.add_argument("--xgboost_dart_mode", type=bool, default=False, choices=[True, False])
    p.add_argument("--uniform_drop", type=bool, default=False, choices=[True, False])
    p.add_argument("--drop_seed", type=int, default=4)
    p.add_argument("--top_rate", type=float, default=0.2)
    p.add_argument("--other_rate", type=float, default=0.1)
    p.add_argument("--min_data_per_group", type=int, default=100)
    p.add_argument("--max_cat_threshold", type=int, default=32)
    p.add_argument("--cat_l2", type=float, default=10.)
    p.add_argument("--cat_smooth", type=float, default=10.)
    p.add_argument("--max_cat_to_onehot", type=int, default=4)
    p.add_argument("--top_k", type=int, default=20)
    p.add_argument("--monotone_constraints", default=None)
    p.add_argument("--monotone_constraints_method", type=str, default="basic", choices=["basic", "intermediate", "advanced"])
    p.add_argument("--monotone_penalty", type=float, default=0.)
    p.add_argument("--feature_contri", default=None)
    p.add_argument("--forcedsplits_filename", default="", type=str)
    p.add_argument("--interaction_constraints", default="", type=str)
    p.add_argument("--refit_decay_rate", type=float, default=0.9)
    p.add_argument("--cegb_tradeoff", type=float, default=1.)
    p.add_argument("--cegb_penalty_split", type=float, default=0.)
    p.add_argument("--output_model", type=str, default="LightGBM_model.txt")
    p.add_argument("--saved_feature_importance_type", type=int, default=0)
    p.add_argument("--path_smooth", type=int, default=0)
    p.add_argument("--verbosity", type=int, default=-1)
    p.add_argument("--snapshot_freq", type=int, default=-1)
    p.add_argument("--use_quantized_grad", type=bool, default=False, choices=[True, False])
    p.add_argument("--num_grad_quant_bins", type=int, default=4)
    p.add_argument("--quant_train_renew_leaf", type=bool, default=False, choices=[True, False])
    p.add_argument("--stochastic_rounding", type=bool, default=False, choices=[True, False])
     
    return p.parse_args()